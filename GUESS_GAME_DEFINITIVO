#include <rclcpp/rclcpp.hpp>
#include <geometry_msgs/msg/pose_stamped.hpp>
#include <tf2_ros/transform_listener.h>
#include <tf2_ros/buffer.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.hpp>

class BowlPoseTransformer : public rclcpp::Node
{
public:
  BowlPoseTransformer()
  : Node("bowl_pose_transformer"),
    tf_buffer_(this->get_clock()),
    tf_listener_(tf_buffer_)
  {
    sub_ = this->create_subscription<geometry_msgs::msg::PoseStamped>(
      "/bowl_position", 10,
      std::bind(&BowlPoseTransformer::pose_callback, this, std::placeholders::_1));

    pub_ = this->create_publisher<geometry_msgs::msg::PoseStamped>("bowl_position_base_footprint", 10);
  }

private:
  void pose_callback(const geometry_msgs::msg::PoseStamped::SharedPtr msg)
  {
    geometry_msgs::msg::PoseStamped pose_in_base_footprint;
    try {
      // Trasforma da base_link (header.frame_id del msg) a base_footprint
      pose_in_base_footprint = tf_buffer_.transform(*msg, "base_footprint", tf2::durationFromSec(0.5));
      RCLCPP_INFO(this->get_logger(), "Trasformato in base_footprint: x=%.3f y=%.3f z=%.3f",
                  pose_in_base_footprint.pose.position.x,
                  pose_in_base_footprint.pose.position.y,
                  pose_in_base_footprint.pose.position.z);

      pub_->publish(pose_in_base_footprint);
    } catch (tf2::TransformException &ex) {
      RCLCPP_WARN(this->get_logger(), "TF error: %s", ex.what());
    }
  }

  rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr sub_;
  rclcpp::Publisher<geometry_msgs::msg::PoseStamped>::SharedPtr pub_;
  tf2_ros::Buffer tf_buffer_;
  tf2_ros::TransformListener tf_listener_;
};

int main(int argc, char **argv)
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<BowlPoseTransformer>());
  rclcpp::shutdown();
  return 0;
}
